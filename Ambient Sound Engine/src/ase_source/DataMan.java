package ase_source;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;

import javax.swing.JFrame;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Dimension;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;

/**
 * This window is used to provide a quick interface to manage connections 
 * between the keywords, sounds and soundscapes
 * 
 * @author CKidwell
 * @author David
 */
public class DataMan extends JFrame {
	
	private static final long serialVersionUID = -3269505291016278742L;
	/** Creates new form dataMan */
	public DataMan() {
		initComponents();
		if (OperationsManager.db != null) {
			sfxFXList.setListData(OperationsManager.db.showTable("sound_file","name"));
			kwFXListB.setListData(OperationsManager.db.showTable("sound_file","name"));
			ssFXListB.setListData(OperationsManager.db.showTable("sound_file","name"));
			kwKeyList.setListData(OperationsManager.db.showTable("keyword","keyword"));
			ssKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
			sfxKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
			sfxScapeListB.setListData(OperationsManager.db.showTable("soundscape", "name"));
			kwScapeListB.setListData(OperationsManager.db.showTable("soundscape", "name"));
			ssScapeList.setListData(OperationsManager.db.showTable("soundscape", "name"));
		} else {
			String[] ndf = { "No database found" };
			sfxFXList.setListData(ndf);
			kwFXListB.setListData(ndf);
			ssFXListB.setListData(ndf);
			kwKeyList.setListData(ndf);
			ssKWListB.setListData(ndf);
			sfxKWListB.setListData(ndf);
			sfxScapeListB.setListData(ndf);
			kwScapeListB.setListData(ndf);
			ssScapeList.setListData(ndf);
			sfxFXList.setEnabled(false);
			kwFXListB.setEnabled(false);
			ssFXListB.setEnabled(false);
			kwKeyList.setEnabled(false);
			ssKWListB.setEnabled(false);
			sfxKWListB.setEnabled(false);
			sfxScapeListB.setEnabled(false);
			kwScapeListB.setEnabled(false);
			ssScapeList.setEnabled(false);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// ">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		tabPane = new javax.swing.JTabbedPane();
		scapeTab = new javax.swing.JPanel();
		sfxTab = new javax.swing.JPanel();
		kwTab = new javax.swing.JPanel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("ASE Manager");
		setFont(new java.awt.Font("Arial", 0, 11));
		tabPane.setFont(new java.awt.Font("Arial", 0, 12));
		tabPane.setMinimumSize(new java.awt.Dimension(475, 335));
		tabPane.setPreferredSize(new java.awt.Dimension(700, 400));

		scapeTab.setFont(new java.awt.Font("Arial", 0, 12));
		scapeTab.setPreferredSize(new java.awt.Dimension(680, 360));
		GridBagLayout gbl_scapeTab = new GridBagLayout();
		gbl_scapeTab.columnWidths = new int[]{155, 270, 270, 0};
		gbl_scapeTab.rowHeights = new int[]{387, 0};
		gbl_scapeTab.columnWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_scapeTab.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		scapeTab.setLayout(gbl_scapeTab);
		ssKWPanel = new javax.swing.JPanel();
		ssKWLabel = new javax.swing.JLabel();
		ssKWLabelA = new javax.swing.JLabel();
		ssKWLabelB = new javax.swing.JLabel();
		ssKWScrollA = new javax.swing.JScrollPane();
		ssKWScrollA.setMinimumSize(new Dimension(120, 23));
		ssKWListA = new javax.swing.JList<String>();
		ssKWScrollB = new javax.swing.JScrollPane();
		ssKWScrollB.setMinimumSize(new Dimension(120, 23));
		ssKWScrollB.setPreferredSize(new Dimension(130, 287));
		ssKWListB = new javax.swing.JList<String>();
		ssKWListB.setMinimumSize(new Dimension(130, 23));
		ssKWbuttonA = new javax.swing.JButton();
		ssKWbuttonB = new javax.swing.JButton();
		ssAddKeywordButton = new javax.swing.JButton();
		ssNewKeywordField = new javax.swing.JTextField();
		
		ssKWPanel.setLayout(new java.awt.GridBagLayout());

		ssKWPanel.setFont(new java.awt.Font("Arial", 0, 11));
		ssKWPanel.setPreferredSize(new java.awt.Dimension(265, 350));
		ssKWLabel.setFont(new java.awt.Font("Arial", 0, 12));
		ssKWLabel.setText("--Keywords--");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new Insets(5, 0, 5, 0);
		ssKWPanel.add(ssKWLabel, gridBagConstraints);

		ssKWLabelA.setFont(new java.awt.Font("Arial", 0, 11));
		ssKWLabelA.setText("Associated");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		ssKWPanel.add(ssKWLabelA, gridBagConstraints);
		
		ssKWLabelB.setFont(new java.awt.Font("Arial", 0, 11));
		ssKWLabelB.setText("Available");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		ssKWPanel.add(ssKWLabelB, gridBagConstraints);

		ssKWScrollA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		ssKWScrollA.setFont(new java.awt.Font("Arial", 0, 11));
		ssKWScrollA.setPreferredSize(new Dimension(130, 287));
		ssKWListA.setFont(new java.awt.Font("Arial", 0, 12));
		ssKWListA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		ssKWListA.setPreferredSize(null);
		ssKWScrollA.setViewportView(ssKWListA);
		
		gridBagConstraints_4 = new java.awt.GridBagConstraints();
		gridBagConstraints_4.insets = new Insets(0, 5, 5, 1);
		gridBagConstraints_4.fill = GridBagConstraints.BOTH;
		gridBagConstraints_4.weighty = 1.0;
		gridBagConstraints_4.weightx = 1.0;
		gridBagConstraints_4.gridx = 0;
		gridBagConstraints_4.gridy = 2;
		ssKWPanel.add(ssKWScrollA, gridBagConstraints_4);
		
		ssKWScrollB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		ssKWScrollB.setFont(new java.awt.Font("Arial", 0, 11));
		ssKWListB.setFont(new java.awt.Font("Arial", 0, 12));
		ssKWListB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		ssKWListB.setPreferredSize(null);
		ssKWScrollB.setViewportView(ssKWListB);
		
		gridBagConstraints_5 = new java.awt.GridBagConstraints();
		gridBagConstraints_5.insets = new Insets(0, 1, 5, 5);
		gridBagConstraints_5.fill = GridBagConstraints.BOTH;
		gridBagConstraints_5.weighty = 1.0;
		gridBagConstraints_5.weightx = 1.0;
		gridBagConstraints_5.gridx = 1;
		gridBagConstraints_5.gridy = 2;
		ssKWPanel.add(ssKWScrollB, gridBagConstraints_5);
		
		ssKWbuttonA.setFont(new java.awt.Font("Arial", 0, 12));
		ssKWbuttonA.setText(">>");
		ssKWbuttonA.setPreferredSize(new java.awt.Dimension(100, 20));
		ssKWbuttonA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ssKWbuttonAActionPerformed(evt);
			}
		});
		
		gridBagConstraints_10 = new java.awt.GridBagConstraints();
		gridBagConstraints_10.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_10.gridx = 0;
		gridBagConstraints_10.gridy = 3;
		ssKWPanel.add(ssKWbuttonA, gridBagConstraints_10);
		
		ssKWbuttonB.setFont(new java.awt.Font("Arial", 0, 12));
		ssKWbuttonB.setText("<<");
		ssKWbuttonB.setPreferredSize(new java.awt.Dimension(100, 20));
		ssKWbuttonB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ssKWbuttonBActionPerformed(evt);
			}
		});
		
		gridBagConstraints_9 = new java.awt.GridBagConstraints();
		gridBagConstraints_9.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_9.gridx = 1;
		gridBagConstraints_9.gridy = 3;
		ssKWPanel.add(ssKWbuttonB, gridBagConstraints_9);

		ssAddKeywordButton.setFont(new java.awt.Font("Arial", 0, 11));
		ssAddKeywordButton.setText("Add Keyword");
		ssAddKeywordButton.setPreferredSize(new java.awt.Dimension(120, 20));
		ssAddKeywordButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ssAddKeywordButtonActionPerformed(evt);
			}
		});
		ssFXPanel = new javax.swing.JPanel();
		ssFXLabel = new javax.swing.JLabel();
		ssFXLabelA = new javax.swing.JLabel();
		ssFXLabelB = new javax.swing.JLabel();
		ssFXScrollA = new javax.swing.JScrollPane();
		ssFXListA = new javax.swing.JList<String>();
		ssFXScrollB = new javax.swing.JScrollPane();
		ssFXListB = new javax.swing.JList<String>();
		ssFXbuttonA = new javax.swing.JButton();
		ssFXbuttonB = new javax.swing.JButton();
		
		ssFXPanel.setLayout(new java.awt.GridBagLayout());
		
		ssFXPanel.setFont(new java.awt.Font("Arial", 0, 11));
		ssFXPanel.setPreferredSize(new java.awt.Dimension(265, 350));
		ssFXLabel.setFont(new java.awt.Font("Arial", 0, 12));
		ssFXLabel.setText("--Sound Files--");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new Insets(5, 0, 5, 0);
		ssFXPanel.add(ssFXLabel, gridBagConstraints);
		
		ssFXLabelA.setFont(new java.awt.Font("Arial", 0, 11));
		ssFXLabelA.setText("Associated");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		ssFXPanel.add(ssFXLabelA, gridBagConstraints);
		
		ssFXLabelB.setFont(new java.awt.Font("Arial", 0, 11));
		ssFXLabelB.setText("Available");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		ssFXPanel.add(ssFXLabelB, gridBagConstraints);
		
		ssFXScrollA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		ssFXScrollA.setFont(new java.awt.Font("Arial", 0, 11));
		ssFXScrollA.setPreferredSize(new java.awt.Dimension(130, 287));
		ssFXListA.setFont(new java.awt.Font("Arial", 0, 12));
		ssFXListA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		ssFXListA.setPreferredSize(null);
		ssFXScrollA.setViewportView(ssFXListA);
		
		gridBagConstraints_2 = new java.awt.GridBagConstraints();
		gridBagConstraints_2.fill = GridBagConstraints.BOTH;
		gridBagConstraints_2.insets = new Insets(0, 5, 5, 1);
		gridBagConstraints_2.weightx = 1.0;
		gridBagConstraints_2.weighty = 1.0;
		gridBagConstraints_2.gridx = 0;
		gridBagConstraints_2.gridy = 2;
		ssFXPanel.add(ssFXScrollA, gridBagConstraints_2);
		
		ssFXScrollB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		ssFXScrollB.setFont(new java.awt.Font("Arial", 0, 11));
		ssFXScrollB.setPreferredSize(new java.awt.Dimension(130, 287));
		ssFXListB.setFont(new java.awt.Font("Arial", 0, 12));
		ssFXListB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		ssFXListB.setPreferredSize(null);
		ssFXScrollB.setViewportView(ssFXListB);
		
		gridBagConstraints_3 = new java.awt.GridBagConstraints();
		gridBagConstraints_3.insets = new Insets(0, 1, 5, 5);
		gridBagConstraints_3.fill = GridBagConstraints.BOTH;
		gridBagConstraints_3.weighty = 1.0;
		gridBagConstraints_3.weightx = 1.0;
		gridBagConstraints_3.gridx = 1;
		gridBagConstraints_3.gridy = 2;
		ssFXPanel.add(ssFXScrollB, gridBagConstraints_3);

		ssFXbuttonA.setFont(new java.awt.Font("Arial", 0, 12));
		ssFXbuttonA.setText(">>");
		ssFXbuttonA.setPreferredSize(new java.awt.Dimension(100, 20));
		ssFXbuttonA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ssFXbuttonAActionPerformed(evt);
			}
		});
		
		gridBagConstraints_11 = new java.awt.GridBagConstraints();
		gridBagConstraints_11.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_11.gridx = 0;
		gridBagConstraints_11.gridy = 3;
		ssFXPanel.add(ssFXbuttonA, gridBagConstraints_11);
		
		ssFXbuttonB.setFont(new java.awt.Font("Arial", 0, 12));
		ssFXbuttonB.setText("<<");
		ssFXbuttonB.setPreferredSize(new java.awt.Dimension(100, 20));
		ssFXbuttonB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ssFXbuttonBActionPerformed(evt);
			}
		});
		ssScapePanel = new javax.swing.JPanel();
		ssScapeLabel = new javax.swing.JLabel();
		ssScapeScroll = new javax.swing.JScrollPane();
		ssScapeList = new javax.swing.JList<String>();
		ssPreviewButton = new javax.swing.JButton();
		ssDelButton = new javax.swing.JButton();
		ssScapePanel.setLayout(new java.awt.GridBagLayout());
		
		ssScapePanel.setFont(new java.awt.Font("Arial", 0, 11));
		ssScapePanel.setPreferredSize(new java.awt.Dimension(150, 350));
		ssScapeLabel.setFont(new java.awt.Font("Arial", 0, 12));
		ssScapeLabel.setText("Soundscapes");
		GridBagConstraints gbc_ssScapeLabel = new GridBagConstraints();
		gbc_ssScapeLabel.insets = new Insets(5, 0, 5, 0);
		ssScapePanel.add(ssScapeLabel, gbc_ssScapeLabel);
		
		ssScapeScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		ssScapeScroll.setFont(new java.awt.Font("Arial", 0, 11));
		ssScapeScroll.setPreferredSize(new java.awt.Dimension(130, 303));
		ssScapeList.setFont(new java.awt.Font("Arial", 0, 12));
		ssScapeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		ssScapeList.setPreferredSize(null);
		ssScapeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
				ssScapeListValueChanged(evt);
			}
		});
		ssScapeList.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				ssScapeListMouseClicked(evt);
			}
		});

		ssScapeScroll.setViewportView(ssScapeList);
		
		gridBagConstraints_1 = new java.awt.GridBagConstraints();
		gridBagConstraints_1.insets = new Insets(0, 5, 5, 5);
		gridBagConstraints_1.weighty = 1.0;
		gridBagConstraints_1.weightx = 1.0;
		gridBagConstraints_1.gridx = 0;
		gridBagConstraints_1.gridy = 1;
		gridBagConstraints_1.fill = java.awt.GridBagConstraints.BOTH;
		ssScapePanel.add(ssScapeScroll, gridBagConstraints_1);

		ssPreviewButton.setFont(new java.awt.Font("Arial", 0, 12));
		ssPreviewButton.setText("Preview");
		ssPreviewButton.setPreferredSize(new java.awt.Dimension(100, 20));
		gridBagConstraints_8 = new java.awt.GridBagConstraints();
		gridBagConstraints_8.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_8.gridx = 0;
		gridBagConstraints_8.gridy = 3;
		ssScapePanel.add(ssPreviewButton, gridBagConstraints_8);
		
		ssDelButton.setFont(new java.awt.Font("Tahoma", 0, 10));
		ssDelButton.setText("Delete Soundscape");
		ssDelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				ssDelButtonActionPerformed(evt);
			}
		});
		
		gridBagConstraints_7 = new java.awt.GridBagConstraints();
		gridBagConstraints_7.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_7.gridx = 0;
		gridBagConstraints_7.gridy = 2;
		ssScapePanel.add(ssDelButton, gridBagConstraints_7);
		
		GridBagConstraints gbc_ssScapePanel = new GridBagConstraints();
		gbc_ssScapePanel.fill = GridBagConstraints.BOTH;
		gbc_ssScapePanel.weighty = 1.0;
		gbc_ssScapePanel.weightx = 1.0;
		gbc_ssScapePanel.insets = new Insets(0, 0, 0, 5);
		gbc_ssScapePanel.gridx = 0;
		gbc_ssScapePanel.gridy = 0;
		scapeTab.add(ssScapePanel, gbc_ssScapePanel);
			
		gridBagConstraints_12 = new java.awt.GridBagConstraints();
		gridBagConstraints_12.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_12.gridx = 1;
		gridBagConstraints_12.gridy = 3;
		ssFXPanel.add(ssFXbuttonB, gridBagConstraints_12);
		
		GridBagConstraints gbc_ssFXPanel = new GridBagConstraints();
		gbc_ssFXPanel.weighty = 1.0;
		gbc_ssFXPanel.weightx = 2.0;
		gbc_ssFXPanel.fill = GridBagConstraints.BOTH;
		gbc_ssFXPanel.insets = new Insets(0, 0, 0, 5);
		gbc_ssFXPanel.gridx = 1;
		gbc_ssFXPanel.gridy = 0;
		scapeTab.add(ssFXPanel, gbc_ssFXPanel);

		gridBagConstraints_13 = new java.awt.GridBagConstraints();
		gridBagConstraints_13.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_13.gridx = 1;
		gridBagConstraints_13.gridy = 5;
		ssKWPanel.add(ssAddKeywordButton, gridBagConstraints_13);

		ssNewKeywordField.setFont(new java.awt.Font("Arial", 0, 12));
		ssNewKeywordField.setPreferredSize(new java.awt.Dimension(130, 20));
		gridBagConstraints_6 = new java.awt.GridBagConstraints();
		gridBagConstraints_6.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_6.fill = GridBagConstraints.HORIZONTAL;
		gridBagConstraints_6.gridx = 1;
		gridBagConstraints_6.gridy = 4;
		ssKWPanel.add(ssNewKeywordField, gridBagConstraints_6);

		GridBagConstraints gbc_ssKWPanel = new GridBagConstraints();
		gbc_ssKWPanel.fill = GridBagConstraints.BOTH;
		gbc_ssKWPanel.weighty = 1.0;
		gbc_ssKWPanel.weightx = 2.0;
		gbc_ssKWPanel.gridx = 2;
		gbc_ssKWPanel.gridy = 0;
		scapeTab.add(ssKWPanel, gbc_ssKWPanel);

		tabPane.addTab("Soundscapes", scapeTab);

		sfxTab.setFont(new java.awt.Font("Arial", 0, 12));
		sfxTab.setPreferredSize(new java.awt.Dimension(680, 360));
		GridBagLayout gbl_sfxTab = new GridBagLayout();
		gbl_sfxTab.columnWidths = new int[]{155, 270, 270, 0};
		gbl_sfxTab.rowHeights = new int[]{387, 0};
		gbl_sfxTab.columnWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_sfxTab.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		sfxTab.setLayout(gbl_sfxTab);
		sfxFXPanel = new javax.swing.JPanel();
		sfxFXLabel = new javax.swing.JLabel();
		sfxFXScroll = new javax.swing.JScrollPane();
		sfxFXList = new javax.swing.JList<String>();
		sfxPreviewButton = new javax.swing.JButton();
		sfxDeleteButton = new javax.swing.JButton();
		sfxFXPanel.setLayout(new java.awt.GridBagLayout());

		sfxFXPanel.setFont(new java.awt.Font("Arial", 0, 11));
		sfxFXPanel.setPreferredSize(new java.awt.Dimension(150, 350));
		sfxFXLabel.setFont(new java.awt.Font("Arial", 0, 12));
		sfxFXLabel.setText("Sound Files");
		GridBagConstraints gbc_sfxFXLabel = new GridBagConstraints();
		gbc_sfxFXLabel.insets = new Insets(5, 0, 5, 0);
		sfxFXPanel.add(sfxFXLabel, gbc_sfxFXLabel);
		
		sfxFXScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		sfxFXScroll.setFont(new java.awt.Font("Arial", 0, 11));
		sfxFXScroll.setPreferredSize(new java.awt.Dimension(130, 303));
		sfxFXList.setFont(new java.awt.Font("Arial", 0, 12));
		sfxFXList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		sfxFXList.setPreferredSize(null);
		sfxFXList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
				sfxFXListValueChanged(evt);
			}
		});
		sfxFXList.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				sfxFXListMouseClicked(evt);
			}
		});
		
		sfxFXScroll.setViewportView(sfxFXList);

		gridBagConstraints_14 = new java.awt.GridBagConstraints();
		gridBagConstraints_14.insets = new Insets(0, 5, 5, 5);
		gridBagConstraints_14.weighty = 1.0;
		gridBagConstraints_14.weightx = 1.0;
		gridBagConstraints_14.fill = GridBagConstraints.BOTH;
		gridBagConstraints_14.gridx = 0;
		gridBagConstraints_14.gridy = 1;
		sfxFXPanel.add(sfxFXScroll, gridBagConstraints_14);

		sfxPreviewButton.setFont(new java.awt.Font("Arial", 0, 12));
		sfxPreviewButton.setText("Preview");
		sfxPreviewButton.setPreferredSize(new java.awt.Dimension(100, 20));
		gridBagConstraints_19 = new java.awt.GridBagConstraints();
		gridBagConstraints_19.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_19.gridx = 0;
		gridBagConstraints_19.gridy = 3;
		sfxFXPanel.add(sfxPreviewButton, gridBagConstraints_19);
		
		sfxDeleteButton.setFont(new java.awt.Font("Tahoma", 0, 10));
		sfxDeleteButton.setText("Delete Sound");
		sfxDeleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sfxDeleteButtonActionPerformed(evt);
			}
		});
		
		gridBagConstraints_26 = new java.awt.GridBagConstraints();
		gridBagConstraints_26.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_26.gridx = 0;
		gridBagConstraints_26.gridy = 2;
		sfxFXPanel.add(sfxDeleteButton, gridBagConstraints_26);
		
		GridBagConstraints gbc_sfxFXPanel = new GridBagConstraints();
		gbc_sfxFXPanel.fill = GridBagConstraints.BOTH;
		gbc_sfxFXPanel.weighty = 1.0;
		gbc_sfxFXPanel.weightx = 1.0;
		gbc_sfxFXPanel.insets = new Insets(0, 0, 0, 5);
		gbc_sfxFXPanel.gridx = 0;
		gbc_sfxFXPanel.gridy = 0;
		sfxTab.add(sfxFXPanel, gbc_sfxFXPanel);
		sfxKWPanel = new javax.swing.JPanel();
		sfxKWLabel = new javax.swing.JLabel();
		sfxKWLabelA = new javax.swing.JLabel();
		sfxKWLabelB = new javax.swing.JLabel();
		sfxKWScrollA = new javax.swing.JScrollPane();
		sfxKWScrollA.setMinimumSize(new Dimension(120, 23));
		sfxKWListA = new javax.swing.JList<String>();
		sfxKWScrollB = new javax.swing.JScrollPane();
		sfxKWScrollB.setMinimumSize(new Dimension(120, 23));
		sfxKWListB = new javax.swing.JList<String>();
		sfxKWbuttonA = new javax.swing.JButton();
		sfxKWbuttonB = new javax.swing.JButton();
		sfxNewKeywordField = new javax.swing.JTextField();
		sfxAddKeywordButton = new javax.swing.JButton();
		
		sfxKWPanel.setLayout(new java.awt.GridBagLayout());
				
		sfxKWPanel.setFont(new java.awt.Font("Arial", 0, 11));
		sfxKWPanel.setPreferredSize(new java.awt.Dimension(265, 350));
		sfxKWLabel.setFont(new java.awt.Font("Arial", 0, 12));
		sfxKWLabel.setText("--Keywords--");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new Insets(5, 0, 5, 0);
		sfxKWPanel.add(sfxKWLabel, gridBagConstraints);
		
		sfxKWLabelA.setFont(new java.awt.Font("Arial", 0, 11));
		sfxKWLabelA.setText("Associated");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		sfxKWPanel.add(sfxKWLabelA, gridBagConstraints);
		
		sfxKWLabelB.setFont(new java.awt.Font("Arial", 0, 11));
		sfxKWLabelB.setText("Available");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		sfxKWPanel.add(sfxKWLabelB, gridBagConstraints);
		
		sfxKWScrollA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		sfxKWScrollA.setFont(new java.awt.Font("Arial", 0, 11));
		sfxKWScrollA.setPreferredSize(new java.awt.Dimension(130, 287));
		sfxKWListA.setFont(new java.awt.Font("Arial", 0, 12));
		sfxKWListA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		sfxKWListA.setPreferredSize(null);
		sfxKWScrollA.setViewportView(sfxKWListA);
		
		gridBagConstraints_17 = new java.awt.GridBagConstraints();
		gridBagConstraints_17.insets = new Insets(0, 5, 5, 1);
		gridBagConstraints_17.weighty = 1.0;
		gridBagConstraints_17.weightx = 1.0;
		gridBagConstraints_17.fill = GridBagConstraints.BOTH;
		gridBagConstraints_17.gridx = 0;
		gridBagConstraints_17.gridy = 2;
		sfxKWPanel.add(sfxKWScrollA, gridBagConstraints_17);
		
		sfxKWScrollB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		sfxKWScrollB.setFont(new java.awt.Font("Arial", 0, 11));
		sfxKWScrollB.setPreferredSize(new java.awt.Dimension(130, 287));
		sfxKWListB.setFont(new java.awt.Font("Arial", 0, 12));
		sfxKWListB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		sfxKWListB.setPreferredSize(new Dimension(130, 80));
		sfxKWScrollB.setViewportView(sfxKWListB);
		
		gridBagConstraints_18 = new java.awt.GridBagConstraints();
		gridBagConstraints_18.insets = new Insets(0, 1, 5, 5);
		gridBagConstraints_18.weightx = 1.0;
		gridBagConstraints_18.weighty = 1.0;
		gridBagConstraints_18.fill = GridBagConstraints.BOTH;
		gridBagConstraints_18.gridx = 1;
		gridBagConstraints_18.gridy = 2;
		sfxKWPanel.add(sfxKWScrollB, gridBagConstraints_18);
		
		sfxKWbuttonA.setFont(new java.awt.Font("Arial", 0, 12));
		sfxKWbuttonA.setText(">>");
		sfxKWbuttonA.setPreferredSize(new java.awt.Dimension(100, 20));
		sfxKWbuttonA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sfxKWbuttonAActionPerformed(evt);
			}
		});
		
		gridBagConstraints_22 = new java.awt.GridBagConstraints();
		gridBagConstraints_22.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_22.gridx = 0;
		gridBagConstraints_22.gridy = 3;
		sfxKWPanel.add(sfxKWbuttonA, gridBagConstraints_22);
		
		sfxKWbuttonB.setFont(new java.awt.Font("Arial", 0, 12));
		sfxKWbuttonB.setText("<<");
		sfxKWbuttonB.setPreferredSize(new java.awt.Dimension(100, 20));
		sfxKWbuttonB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sfxKWbuttonBActionPerformed(evt);
			}
		});

		gridBagConstraints_23 = new java.awt.GridBagConstraints();
		gridBagConstraints_23.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_23.gridx = 1;
		gridBagConstraints_23.gridy = 3;
		sfxKWPanel.add(sfxKWbuttonB, gridBagConstraints_23);

		sfxNewKeywordField.setFont(new java.awt.Font("Arial", 0, 12));
		sfxNewKeywordField.setPreferredSize(new java.awt.Dimension(130, 20));
		gridBagConstraints_24 = new java.awt.GridBagConstraints();
		gridBagConstraints_24.fill = GridBagConstraints.HORIZONTAL;
		gridBagConstraints_24.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_24.gridx = 1;
		gridBagConstraints_24.gridy = 4;
		sfxKWPanel.add(sfxNewKeywordField, gridBagConstraints_24);
		
		sfxAddKeywordButton.setFont(new java.awt.Font("Arial", 0, 11));
		sfxAddKeywordButton.setText("Add Keyword");
		sfxAddKeywordButton.setPreferredSize(new java.awt.Dimension(120, 20));
		sfxAddKeywordButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sfxAddKeywordButtonActionPerformed(evt);
			}
		});
		sfxScapePanel = new javax.swing.JPanel();
		sfxScapeLabel = new javax.swing.JLabel();
		sfxScapeLabelA = new javax.swing.JLabel();
		sfxScapeLabelB = new javax.swing.JLabel();
		sfxScapeScrollA = new javax.swing.JScrollPane();
		sfxScapeListA = new javax.swing.JList<String>();
		sfxScapeScrollB = new javax.swing.JScrollPane();
		sfxScapeListB = new javax.swing.JList<String>();
		sfxScapeButtonA = new javax.swing.JButton();
		sfxScapeButtonB = new javax.swing.JButton();
		
		sfxScapePanel.setLayout(new java.awt.GridBagLayout());
		
		sfxScapePanel.setFont(new java.awt.Font("Arial", 0, 11));
		sfxScapePanel.setPreferredSize(new java.awt.Dimension(265, 350));
		sfxScapeLabel.setFont(new java.awt.Font("Arial", 0, 12));
		sfxScapeLabel.setText("--Soundscapes--");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new Insets(5, 0, 5, 0);
		sfxScapePanel.add(sfxScapeLabel, gridBagConstraints);
		
		sfxScapeLabelA.setFont(new java.awt.Font("Arial", 0, 11));
		sfxScapeLabelA.setText("Associated");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		sfxScapePanel.add(sfxScapeLabelA, gridBagConstraints);
		
		sfxScapeLabelB.setFont(new java.awt.Font("Arial", 0, 11));
		sfxScapeLabelB.setText("Available");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
		sfxScapePanel.add(sfxScapeLabelB, gridBagConstraints);
		
		sfxScapeScrollA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		sfxScapeScrollA.setFont(new java.awt.Font("Arial", 0, 11));
		sfxScapeScrollA.setPreferredSize(new java.awt.Dimension(130, 287));
		sfxScapeListA.setFont(new java.awt.Font("Arial", 0, 12));
		sfxScapeListA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		sfxScapeListA.setPreferredSize(null);
		sfxScapeScrollA.setViewportView(sfxScapeListA);
		
		gridBagConstraints_15 = new java.awt.GridBagConstraints();
		gridBagConstraints_15.insets = new Insets(0, 5, 5, 1);
		gridBagConstraints_15.fill = GridBagConstraints.BOTH;
		gridBagConstraints_15.weightx = 1.0;
		gridBagConstraints_15.weighty = 1.0;
		gridBagConstraints_15.gridx = 0;
		gridBagConstraints_15.gridy = 2;
		sfxScapePanel.add(sfxScapeScrollA, gridBagConstraints_15);

		sfxScapeScrollB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		sfxScapeScrollB.setFont(new java.awt.Font("Arial", 0, 11));
		sfxScapeScrollB.setPreferredSize(new java.awt.Dimension(130, 287));
		sfxScapeListB.setFont(new java.awt.Font("Arial", 0, 12));
		sfxScapeListB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		sfxScapeListB.setPreferredSize(null);
		sfxScapeScrollB.setViewportView(sfxScapeListB);
		
		gridBagConstraints_16 = new java.awt.GridBagConstraints();
		gridBagConstraints_16.insets = new Insets(0, 1, 5, 5);
		gridBagConstraints_16.fill = GridBagConstraints.BOTH;
		gridBagConstraints_16.weighty = 1.0;
		gridBagConstraints_16.weightx = 1.0;
		gridBagConstraints_16.gridx = 1;
		gridBagConstraints_16.gridy = 2;
		sfxScapePanel.add(sfxScapeScrollB, gridBagConstraints_16);

		sfxScapeButtonA.setFont(new java.awt.Font("Arial", 0, 12));
		sfxScapeButtonA.setText(">>");
		sfxScapeButtonA.setPreferredSize(new java.awt.Dimension(100, 20));
		sfxScapeButtonA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sfxScapeButtonAActionPerformed(evt);
			}
		});
		
		gridBagConstraints_20 = new java.awt.GridBagConstraints();
		gridBagConstraints_20.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_20.gridx = 0;
		gridBagConstraints_20.gridy = 3;
		sfxScapePanel.add(sfxScapeButtonA, gridBagConstraints_20);
		
		sfxScapeButtonB.setFont(new java.awt.Font("Arial", 0, 12));
		sfxScapeButtonB.setText("<<");
		sfxScapeButtonB.setPreferredSize(new java.awt.Dimension(100, 20));
		sfxScapeButtonB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				sfxScapeButtonBActionPerformed(evt);
			}
		});
		
		gridBagConstraints_21 = new java.awt.GridBagConstraints();
		gridBagConstraints_21.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_21.gridx = 1;
		gridBagConstraints_21.gridy = 3;
		sfxScapePanel.add(sfxScapeButtonB, gridBagConstraints_21);
		
		GridBagConstraints gbc_sfxScapePanel = new GridBagConstraints();
		gbc_sfxScapePanel.fill = GridBagConstraints.BOTH;
		gbc_sfxScapePanel.weighty = 1.0;
		gbc_sfxScapePanel.weightx = 2.0;
		gbc_sfxScapePanel.insets = new Insets(0, 0, 0, 5);
		gbc_sfxScapePanel.gridx = 1;
		gbc_sfxScapePanel.gridy = 0;
		sfxTab.add(sfxScapePanel, gbc_sfxScapePanel);

		gridBagConstraints_25 = new java.awt.GridBagConstraints();
		gridBagConstraints_25.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_25.gridx = 1;
		gridBagConstraints_25.gridy = 5;
		sfxKWPanel.add(sfxAddKeywordButton, gridBagConstraints_25);

		GridBagConstraints gbc_sfxKWPanel = new GridBagConstraints();
		gbc_sfxKWPanel.weighty = 1.0;
		gbc_sfxKWPanel.weightx = 2.0;
		gbc_sfxKWPanel.fill = GridBagConstraints.BOTH;
		gbc_sfxKWPanel.gridx = 2;
		gbc_sfxKWPanel.gridy = 0;
		sfxTab.add(sfxKWPanel, gbc_sfxKWPanel);

		tabPane.addTab("Sound Files", sfxTab);

		kwTab.setFont(new java.awt.Font("Arial", 0, 12));
		kwTab.setPreferredSize(new java.awt.Dimension(680, 360));
		GridBagLayout gbl_kwTab = new GridBagLayout();
		gbl_kwTab.columnWidths = new int[]{155, 270, 270, 0};
		gbl_kwTab.rowHeights = new int[]{387, 0};
		gbl_kwTab.columnWeights = new double[]{0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_kwTab.rowWeights = new double[]{0.0, Double.MIN_VALUE};
		kwTab.setLayout(gbl_kwTab);
		kwScapePanel = new javax.swing.JPanel();
		kwScapeLabel = new javax.swing.JLabel();
		kwScapeLabelA = new javax.swing.JLabel();
		kwScapeLabelB = new javax.swing.JLabel();
		kwScapeScrollA = new javax.swing.JScrollPane();
		kwScapeScrollA.setMinimumSize(new Dimension(120, 23));
		kwScapeListA = new javax.swing.JList<String>();
		kwScapeScrollB = new javax.swing.JScrollPane();
		kwScapeScrollB.setMinimumSize(new Dimension(120, 23));
		kwScapeListB = new javax.swing.JList<String>();
		kwScapeButtonA = new javax.swing.JButton();
		kwScapeButtonB = new javax.swing.JButton();
		
		kwScapePanel.setLayout(new java.awt.GridBagLayout());
		
		kwScapePanel.setFont(new java.awt.Font("Arial", 0, 11));
		kwScapePanel.setPreferredSize(new java.awt.Dimension(265, 350));
		kwScapeLabel.setFont(new java.awt.Font("Arial", 0, 12));
		kwScapeLabel.setText("--Soundscapes--");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new Insets(5, 5, 5, 5);
		kwScapePanel.add(kwScapeLabel, gridBagConstraints);
		
		kwScapeLabelA.setFont(new java.awt.Font("Arial", 0, 11));
		kwScapeLabelA.setText("Associated");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new Insets(0, 5, 5, 5);
		kwScapePanel.add(kwScapeLabelA, gridBagConstraints);

		kwScapeLabelB.setFont(new java.awt.Font("Arial", 0, 11));
		kwScapeLabelB.setText("Available");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new Insets(0, 5, 5, 5);
		kwScapePanel.add(kwScapeLabelB, gridBagConstraints);

		kwScapeScrollA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		kwScapeScrollA.setFont(new java.awt.Font("Arial", 0, 11));
		kwScapeScrollA.setPreferredSize(new java.awt.Dimension(130, 287));
		kwScapeListA.setFont(new java.awt.Font("Arial", 0, 12));
		kwScapeListA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		kwScapeListA.setPreferredSize(null);
		kwScapeScrollA.setViewportView(kwScapeListA);

		gridBagConstraints_31 = new java.awt.GridBagConstraints();
		gridBagConstraints_31.insets = new Insets(0, 5, 5, 1);
		gridBagConstraints_31.fill = GridBagConstraints.BOTH;
		gridBagConstraints_31.weighty = 1.0;
		gridBagConstraints_31.weightx = 1.0;
		gridBagConstraints_31.gridx = 0;
		gridBagConstraints_31.gridy = 2;
		kwScapePanel.add(kwScapeScrollA, gridBagConstraints_31);

		kwScapeScrollB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		kwScapeScrollB.setFont(new java.awt.Font("Arial", 0, 11));
		kwScapeScrollB.setPreferredSize(new java.awt.Dimension(130, 287));
		kwScapeListB.setFont(new java.awt.Font("Arial", 0, 12));
		kwScapeListB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		kwScapeListB.setPreferredSize(null);
		kwScapeScrollB.setViewportView(kwScapeListB);

		gridBagConstraints_32 = new java.awt.GridBagConstraints();
		gridBagConstraints_32.insets = new Insets(0, 1, 5, 5);
		gridBagConstraints_32.fill = GridBagConstraints.BOTH;
		gridBagConstraints_32.weightx = 1.0;
		gridBagConstraints_32.weighty = 1.0;
		gridBagConstraints_32.gridx = 1;
		gridBagConstraints_32.gridy = 2;
		kwScapePanel.add(kwScapeScrollB, gridBagConstraints_32);

		kwScapeButtonA.setFont(new java.awt.Font("Arial", 0, 12));
		kwScapeButtonA.setText(">>");
		kwScapeButtonA.setPreferredSize(new java.awt.Dimension(100, 20));
		kwScapeButtonA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				kwScapeButtonAActionPerformed(evt);
			}
		});

		gridBagConstraints_33 = new java.awt.GridBagConstraints();
		gridBagConstraints_33.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_33.gridx = 0;
		gridBagConstraints_33.gridy = 3;
		kwScapePanel.add(kwScapeButtonA, gridBagConstraints_33);

		kwScapeButtonB.setFont(new java.awt.Font("Arial", 0, 12));
		kwScapeButtonB.setText("<<");
		kwScapeButtonB.setPreferredSize(new java.awt.Dimension(100, 20));
		kwScapeButtonB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				kwScapeButtonBActionPerformed(evt);
			}
		});
		kwKeyPanel = new javax.swing.JPanel();
		kwKeyLabel = new javax.swing.JLabel();
		kwKeyScroll = new javax.swing.JScrollPane();
		kwKeyList = new javax.swing.JList<String>();
		kwAddKeywordButton = new javax.swing.JButton();
		kwNewKeywordField = new javax.swing.JTextField();
		kwDeleteButton = new javax.swing.JButton();
		kwKeyPanel.setLayout(new java.awt.GridBagLayout());
		
		kwKeyPanel.setFont(new java.awt.Font("Arial", 0, 11));
		kwKeyPanel.setPreferredSize(new java.awt.Dimension(150, 350));
		kwKeyLabel.setFont(new java.awt.Font("Arial", 0, 12));
		kwKeyLabel.setText("Keywords");
		GridBagConstraints gbc_kwKeyLabel = new GridBagConstraints();
		gbc_kwKeyLabel.insets = new Insets(5, 5, 5, 5);
		kwKeyPanel.add(kwKeyLabel, gbc_kwKeyLabel);
		
		kwKeyScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		kwKeyScroll.setFont(new java.awt.Font("Arial", 0, 11));
		kwKeyScroll.setPreferredSize(new java.awt.Dimension(130, 279));
		kwKeyList.setFont(new java.awt.Font("Arial", 0, 12));
		kwKeyList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		kwKeyList.setPreferredSize(null);
		kwKeyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
			public void valueChanged(
					javax.swing.event.ListSelectionEvent evt) {
				kwKeyListValueChanged(evt);
			}
		});
		kwKeyList.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(MouseEvent evt) {
				kwKeyListMouseClicked(evt);
			}
		});
		
		kwKeyScroll.setViewportView(kwKeyList);
		
		gridBagConstraints_27 = new java.awt.GridBagConstraints();
		gridBagConstraints_27.fill = GridBagConstraints.BOTH;
		gridBagConstraints_27.weighty = 1.0;
		gridBagConstraints_27.weightx = 1.0;
		gridBagConstraints_27.gridx = 0;
		gridBagConstraints_27.gridy = 1;
		gridBagConstraints_27.insets = new Insets(0, 5, 5, 5);
		kwKeyPanel.add(kwKeyScroll, gridBagConstraints_27);
		
		kwAddKeywordButton.setFont(new java.awt.Font("Arial", 0, 11));
		kwAddKeywordButton.setText("Add Keyword");
		kwAddKeywordButton.setPreferredSize(new java.awt.Dimension(120, 20));
		kwAddKeywordButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				kwAddKeywordButtonActionPerformed(evt);
			}
		});
		
		gridBagConstraints_29 = new java.awt.GridBagConstraints();
		gridBagConstraints_29.insets = new Insets(0, 5, 5, 5);
		gridBagConstraints_29.gridx = 0;
		gridBagConstraints_29.gridy = 4;
		kwKeyPanel.add(kwAddKeywordButton, gridBagConstraints_29);
		
		kwNewKeywordField.setFont(new java.awt.Font("Arial", 0, 12));
		kwNewKeywordField.setPreferredSize(new java.awt.Dimension(130, 20));
		gridBagConstraints_28 = new java.awt.GridBagConstraints();
		gridBagConstraints_28.insets = new Insets(0, 5, 5, 5);
		gridBagConstraints_28.gridx = 0;
		gridBagConstraints_28.gridy = 3;
		kwKeyPanel.add(kwNewKeywordField, gridBagConstraints_28);
		
		kwDeleteButton.setFont(new java.awt.Font("Tahoma", 0, 10));
		kwDeleteButton.setText("Delete Keyword");
		kwDeleteButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				kwDeleteButtonActionPerformed(evt);
			}
		});
		
		gridBagConstraints_30 = new java.awt.GridBagConstraints();
		gridBagConstraints_30.insets = new Insets(0, 5, 5, 5);
		gridBagConstraints_30.gridx = 0;
		gridBagConstraints_30.gridy = 2;
		kwKeyPanel.add(kwDeleteButton, gridBagConstraints_30);
		
		GridBagConstraints gbc_kwKeyPanel = new GridBagConstraints();
		gbc_kwKeyPanel.weighty = 1.0;
		gbc_kwKeyPanel.weightx = 1.0;
		gbc_kwKeyPanel.fill = GridBagConstraints.BOTH;
		gbc_kwKeyPanel.insets = new Insets(0, 0, 0, 5);
		gbc_kwKeyPanel.gridx = 0;
		gbc_kwKeyPanel.gridy = 0;
		kwTab.add(kwKeyPanel, gbc_kwKeyPanel);

		gridBagConstraints_34 = new java.awt.GridBagConstraints();
		gridBagConstraints_34.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_34.gridx = 1;
		gridBagConstraints_34.gridy = 3;
		kwScapePanel.add(kwScapeButtonB, gridBagConstraints_34);

		GridBagConstraints gbc_kwScapePanel = new GridBagConstraints();
		gbc_kwScapePanel.weighty = 1.0;
		gbc_kwScapePanel.weightx = 2.0;
		gbc_kwScapePanel.fill = GridBagConstraints.BOTH;
		gbc_kwScapePanel.insets = new Insets(0, 0, 0, 5);
		gbc_kwScapePanel.gridx = 1;
		gbc_kwScapePanel.gridy = 0;
		kwTab.add(kwScapePanel, gbc_kwScapePanel);

		tabPane.addTab("Keywords", kwTab);
		kwFXPanel = new javax.swing.JPanel();
		kwFXLabel = new javax.swing.JLabel();
		kwFXLabelA = new javax.swing.JLabel();
		kwFXLabelB = new javax.swing.JLabel();
		kwFXScrollA = new javax.swing.JScrollPane();
		kwFXScrollA.setMinimumSize(new Dimension(120, 23));
		kwFXListA = new javax.swing.JList<String>();
		kwFXScrollB = new javax.swing.JScrollPane();
		kwFXScrollB.setMinimumSize(new Dimension(120, 23));
		kwFXListB = new javax.swing.JList<String>();
		kwFXbuttonA = new javax.swing.JButton();
		kwFXbuttonB = new javax.swing.JButton();
		
		kwFXPanel.setLayout(new java.awt.GridBagLayout());
				
		kwFXPanel.setFont(new java.awt.Font("Arial", 0, 11));
		kwFXPanel.setPreferredSize(new java.awt.Dimension(265, 350));
		kwFXLabel.setFont(new java.awt.Font("Arial", 0, 12));
		kwFXLabel.setText("Sound Files");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.insets = new Insets(5, 5, 5, 5);
		kwFXPanel.add(kwFXLabel, gridBagConstraints);
		
		kwFXLabelA.setFont(new java.awt.Font("Arial", 0, 11));
		kwFXLabelA.setText("Associated");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new Insets(0, 5, 5, 5);
		kwFXPanel.add(kwFXLabelA, gridBagConstraints);

		kwFXLabelB.setFont(new java.awt.Font("Arial", 0, 11));
		kwFXLabelB.setText("Available");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new Insets(0, 5, 5, 5);
		kwFXPanel.add(kwFXLabelB, gridBagConstraints);
		
		kwFXScrollA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		kwFXScrollA.setFont(new java.awt.Font("Arial", 0, 11));
		kwFXScrollA.setPreferredSize(new java.awt.Dimension(130, 287));
		kwFXListA.setFont(new java.awt.Font("Arial", 0, 12));
		kwFXListA.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		kwFXListA.setPreferredSize(null);
		kwFXScrollA.setViewportView(kwFXListA);
		
		gridBagConstraints_37 = new java.awt.GridBagConstraints();
		gridBagConstraints_37.weightx = 1.0;
		gridBagConstraints_37.fill = GridBagConstraints.BOTH;
		gridBagConstraints_37.insets = new Insets(0, 5, 5, 1);
		gridBagConstraints_37.weighty = 1.0;
		gridBagConstraints_37.gridx = 0;
		gridBagConstraints_37.gridy = 2;
		kwFXPanel.add(kwFXScrollA, gridBagConstraints_37);
		
		kwFXScrollB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		kwFXScrollB.setFont(new java.awt.Font("Arial", 0, 11));
		kwFXScrollB.setPreferredSize(new java.awt.Dimension(130, 287));
		kwFXListB.setFont(new java.awt.Font("Arial", 0, 12));
		kwFXListB.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		kwFXListB.setPreferredSize(null);
		kwFXScrollB.setViewportView(kwFXListB);
		
		gridBagConstraints_38 = new java.awt.GridBagConstraints();
		gridBagConstraints_38.weightx = 1.0;
		gridBagConstraints_38.weighty = 1.0;
		gridBagConstraints_38.fill = GridBagConstraints.BOTH;
		gridBagConstraints_38.insets = new Insets(0, 1, 5, 5);
		gridBagConstraints_38.gridx = 1;
		gridBagConstraints_38.gridy = 2;
		kwFXPanel.add(kwFXScrollB, gridBagConstraints_38);
		
		kwFXbuttonA.setFont(new java.awt.Font("Arial", 0, 12));
		kwFXbuttonA.setText(">>");
		kwFXbuttonA.setPreferredSize(new java.awt.Dimension(100, 20));
		kwFXbuttonA.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				kwFXbuttonAActionPerformed(evt);
			}
		});
		
		gridBagConstraints_35 = new java.awt.GridBagConstraints();
		gridBagConstraints_35.insets = new Insets(0, 1, 5, 10);
		gridBagConstraints_35.gridx = 0;
		gridBagConstraints_35.gridy = 3;
		kwFXPanel.add(kwFXbuttonA, gridBagConstraints_35);
		
		kwFXbuttonB.setFont(new java.awt.Font("Arial", 0, 12));
		kwFXbuttonB.setText("<<");
		kwFXbuttonB.setPreferredSize(new java.awt.Dimension(100, 20));
		kwFXbuttonB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				kwFXbuttonBActionPerformed(evt);
			}
		});
		
		gridBagConstraints_36 = new java.awt.GridBagConstraints();
		gridBagConstraints_36.insets = new Insets(0, 10, 5, 10);
		gridBagConstraints_36.gridx = 1;
		gridBagConstraints_36.gridy = 3;
		kwFXPanel.add(kwFXbuttonB, gridBagConstraints_36);
		
		GridBagConstraints gbc_kwFXPanel = new GridBagConstraints();
		gbc_kwFXPanel.weighty = 1.0;
		gbc_kwFXPanel.weightx = 2.0;
		gbc_kwFXPanel.fill = GridBagConstraints.BOTH;
		gbc_kwFXPanel.gridx = 2;
		gbc_kwFXPanel.gridy = 0;
		kwTab.add(kwFXPanel, gbc_kwFXPanel);

		GroupLayout layout = new GroupLayout(getContentPane());
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(tabPane, GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE));
		layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(tabPane, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		getContentPane().setLayout(layout);
		pack();
	}

	/**
	 * Deletes a keyword from the system
	 * 
	 * @param evt
	 */
	private void kwDeleteButtonActionPerformed(ActionEvent evt) {
		String keyword = kwKeyList.getSelectedValue().toString();
		OperationsManager.db.deleteKW(keyword);
		ssKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
		sfxKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
		kwKeyList.setListData(OperationsManager.db.showTable("keyword","keyword"));
	}

	/**
	 * Deletes a sound from the system
	 * 
	 * @param evt
	 */
	private void sfxDeleteButtonActionPerformed(ActionEvent evt) {
		String sound = sfxFXList.getSelectedValue().toString();
		OperationsManager.db.deleteSound(sound);
		kwFXListB.setListData(OperationsManager.db.showTable("sound_file","name"));
		ssFXListB.setListData(OperationsManager.db.showTable("sound_file","name"));
		sfxFXList.setListData(OperationsManager.db.showTable("sound_file","name"));
	}

	/**
	 * Adds a keyword to the system
	 * 
	 * @param evt
	 */
	private void ssAddKeywordButtonActionPerformed(ActionEvent evt) {
		OperationsManager.db.addKeywordIntoSystem(ssNewKeywordField.getText());
		kwKeyList.setListData(OperationsManager.db.showTable("keyword","keyword"));
		ssKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
		sfxKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
	}

	/**
	 * Adds a keyword into the system
	 * 
	 * @param evt
	 */
	private void sfxAddKeywordButtonActionPerformed(ActionEvent evt) {
		OperationsManager.db.addKeywordIntoSystem(sfxNewKeywordField.getText());
		kwKeyList.setListData(OperationsManager.db.showTable("keyword","keyword"));
		ssKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
		sfxKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
	}

	/**
	 * Deletes a soundscape from the system
	 * 
	 * @param evt
	 */
	private void ssDelButtonActionPerformed(ActionEvent evt) {
		String scape = ssScapeList.getSelectedValue().toString();
		OperationsManager.db.deleteScape(scape);
		sfxScapeListB.setListData(OperationsManager.db.showTable("soundscape","name"));
		kwScapeListB.setListData(OperationsManager.db.showTable("soundscape","name"));
		ssScapeList.setListData(OperationsManager.db.showTable("soundscape","name"));
	}

	/**
	 * Removes a keyword/sound file pair
	 * 
	 * @param evt
	 */
	private void kwFXbuttonAActionPerformed(ActionEvent evt) {
		String soundFX = kwFXListA.getSelectedValue().toString();
		int index = kwFXListA.getSelectedIndex();
		String kw = kwKeyList.getSelectedValue().toString();
		OperationsManager.db.deleteKeywordSoundFile(soundFX, kw);
		kwFXListA.remove(index);
		kwFXListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
	}

	/**
	 * Removes a keyword/soundscape pair
	 * 
	 * @param evt
	 */
	private void kwScapeButtonAActionPerformed(ActionEvent evt) {
		String scape = kwScapeListA.getSelectedValue().toString();
		String kw = kwKeyList.getSelectedValue().toString();
		OperationsManager.db.deleteKwFromSoundscape(scape, kw);
		kwScapeListA.setListData(OperationsManager.db.getKeywordSoundscapes(kw));
	}

	/**
	 * Removes a keyword/sound file pair
	 * 
	 * @param evt
	 */
	private void sfxKWbuttonAActionPerformed(ActionEvent evt) {
		String soundFX = sfxFXList.getSelectedValue().toString();
		String kw = sfxKWListA.getSelectedValue().toString();
		OperationsManager.db.deleteKeywordSoundFile(soundFX, kw);
		sfxKWListA.setListData(OperationsManager.db.getSoundKeywords(soundFX));
	}

	/**
	 * Removes a sound/soundscape pair
	 * 
	 * @param evt
	 */
	private void sfxScapeButtonAActionPerformed(ActionEvent evt) {
		String soundFX = sfxFXList.getSelectedValue().toString();
		String scape = sfxScapeListA.getSelectedValue().toString();
		OperationsManager.db.deleteSoundFromSoundscape(scape, soundFX);
		sfxScapeListA.setListData(OperationsManager.db.getSoundSoundscapes(soundFX));
	}

	/**
	 * Removes a keyword/soundscape pair
	 * 
	 * @param evt
	 */
	private void ssKWbuttonAActionPerformed(ActionEvent evt) {
		String scape = ssScapeList.getSelectedValue().toString();
		String kw = ssKWListA.getSelectedValue().toString();
		OperationsManager.db.deleteKwFromSoundscape(scape, kw);
		ssKWListA.setListData(OperationsManager.db.getSoundscapeKeywords(scape));
	}

	/**
	 * Removes a sound/soundscape pair
	 * 
	 * @param evt
	 */
	private void ssFXbuttonAActionPerformed(ActionEvent evt) {
		String scape = ssScapeList.getSelectedValue().toString();
		String soundFX = ssFXListA.getSelectedValue().toString();
		OperationsManager.db.deleteSoundFromSoundscape(scape, soundFX);
		ssFXListA.setListData(OperationsManager.db.getSoundscapeSounds(scape));
	}

	/**
	 * Adds a keyword/sound pair
	 * 
	 * @param evt
	 */
	private void kwFXbuttonBActionPerformed(ActionEvent evt) {
		String soundFX = kwFXListB.getSelectedValue().toString();
		String kw = kwKeyList.getSelectedValue().toString();
		OperationsManager.db.addKeywordToSoundFile(soundFX, kw);
		kwFXListA.setListData(OperationsManager.db.getKeywordSounds(kw));
	}// GEN-LAST:event_kwFXbuttonBActionPerformed

	/**
	 * Adds a keyword/soundscape pair
	 * 
	 * @param evt
	 */
	private void kwScapeButtonBActionPerformed(ActionEvent evt) {
		String scape = kwScapeListB.getSelectedValue().toString();
		String kw = kwKeyList.getSelectedValue().toString();
		OperationsManager.db.addKeywordToSoundscape(scape, kw);
		kwScapeListA.setListData(OperationsManager.db.getKeywordSoundscapes(kw));
	}

	/**
	 * Adds a keyword/sound pair
	 * 
	 * @param evt
	 */
	private void sfxKWbuttonBActionPerformed(ActionEvent evt) {
		String soundFX = sfxFXList.getSelectedValue().toString();
		String kw = sfxKWListB.getSelectedValue().toString();
		OperationsManager.db.addKeywordToSoundFile(soundFX, kw);
		sfxKWListA.setListData(OperationsManager.db.getSoundKeywords(soundFX));
	}

	/**
	 * Adds a sound/soundscape pair
	 * 
	 * @param evt
	 */
	private void sfxScapeButtonBActionPerformed(ActionEvent evt) {
		String soundFX = sfxFXList.getSelectedValue().toString();
		String scape = sfxScapeListB.getSelectedValue().toString();
		OperationsManager.db.addSoundFileToSoundscape(scape, soundFX);
		sfxScapeListA.setListData(OperationsManager.db.getSoundSoundscapes(soundFX));
	}

	/**
	 * Adds a keyword/soundscape pair
	 * 
	 * @param evt
	 */
	private void ssKWbuttonBActionPerformed(ActionEvent evt) {
		String scape = ssScapeList.getSelectedValue().toString();
		String kw = ssKWListB.getSelectedValue().toString();
		OperationsManager.db.addKeywordToSoundscape(scape, kw);
		ssKWListA.setListData(OperationsManager.db.getSoundscapeKeywords(scape));
	}

	/**
	 * Adds a sound/soundscape pair
	 * 
	 * @param evt
	 */
	private void ssFXbuttonBActionPerformed(ActionEvent evt) {
		String scape = ssScapeList.getSelectedValue().toString();
		String soundFX = ssFXListB.getSelectedValue().toString();
		OperationsManager.db.addSoundFileToSoundscape(scape, soundFX);
		ssFXListA.setListData(OperationsManager.db.getSoundscapeSounds(scape));
	}

	/**
	 * Adds a keyword to the system
	 * 
	 * @param evt
	 */
	private void kwAddKeywordButtonActionPerformed(ActionEvent evt) {
		OperationsManager.db.addKeywordIntoSystem(kwNewKeywordField.getText());
		kwKeyList.setListData(OperationsManager.db.showTable("keyword","keyword"));
		ssKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
		sfxKWListB.setListData(OperationsManager.db.showTable("keyword","keyword"));
	}

	/**
	 * Loads soundscapes and sounds associated with the selected keyword
	 * 
	 * @param evt
	 */
	private void kwKeyListValueChanged(javax.swing.event.ListSelectionEvent evt) {
		String search = kwKeyList.getSelectedValue().toString();
		kwScapeListA.setListData(OperationsManager.db.getKeywordSoundscapes(search));
		kwFXListA.setListData(OperationsManager.db.getKeywordSounds(search));
	}

	private void kwKeyListMouseClicked(MouseEvent evt) {
		String search = kwKeyList.getSelectedValue().toString();
		kwScapeListA.setListData(OperationsManager.db.getKeywordSoundscapes(search));
		kwFXListA.setListData(OperationsManager.db.getKeywordSounds(search));
	}

	/**
	 * Loads keywords and soundscapes associated with the selected sound
	 * 
	 * @param evt
	 */
	private void sfxFXListValueChanged(javax.swing.event.ListSelectionEvent evt) {
		String search = sfxFXList.getSelectedValue().toString();
		sfxKWListA.setListData(OperationsManager.db.getSoundKeywords(search));
		sfxScapeListA.setListData(OperationsManager.db.getSoundSoundscapes(search));
	}

	private void sfxFXListMouseClicked(MouseEvent evt) {
		String search = sfxFXList.getSelectedValue().toString();
		sfxKWListA.setListData(OperationsManager.db.getSoundKeywords(search));
		sfxScapeListA.setListData(OperationsManager.db.getSoundSoundscapes(search));
	}

	/**
	 * Loads sounds and keywords associated with the selected soundscape
	 * 
	 * @param evt
	 */
	private void ssScapeListValueChanged(javax.swing.event.ListSelectionEvent evt) {
		String search = ssScapeList.getSelectedValue().toString();
		ssKWListA.setListData(OperationsManager.db.getSoundscapeKeywords(search));
		ssFXListA.setListData(OperationsManager.db.getSoundscapeSounds(search));
	}

	private void ssScapeListMouseClicked(MouseEvent evt) {
		String search = ssScapeList.getSelectedValue().toString();
		ssKWListA.setListData(OperationsManager.db.getSoundscapeKeywords(search));
		ssFXListA.setListData(OperationsManager.db.getSoundscapeSounds(search));
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new DataMan().setVisible(true);
			}
		});
	}

	private javax.swing.JButton kwAddKeywordButton;
	private javax.swing.JButton kwDeleteButton;
	private javax.swing.JLabel kwFXLabel;
	private javax.swing.JLabel kwFXLabelA;
	private javax.swing.JLabel kwFXLabelB;
	private javax.swing.JList<String> kwFXListA;
	private javax.swing.JList<String> kwFXListB;
	private javax.swing.JPanel kwFXPanel;
	private javax.swing.JScrollPane kwFXScrollA;
	private javax.swing.JScrollPane kwFXScrollB;
	private javax.swing.JButton kwFXbuttonA;
	private javax.swing.JButton kwFXbuttonB;
	private javax.swing.JLabel kwKeyLabel;
	private javax.swing.JList<String> kwKeyList;
	private javax.swing.JPanel kwKeyPanel;
	private javax.swing.JScrollPane kwKeyScroll;
	private javax.swing.JTextField kwNewKeywordField;
	private javax.swing.JButton kwScapeButtonA;
	private javax.swing.JButton kwScapeButtonB;
	private javax.swing.JLabel kwScapeLabel;
	private javax.swing.JLabel kwScapeLabelA;
	private javax.swing.JLabel kwScapeLabelB;
	private javax.swing.JList<String> kwScapeListA;
	private javax.swing.JList<String> kwScapeListB;
	private javax.swing.JPanel kwScapePanel;
	private javax.swing.JScrollPane kwScapeScrollA;
	private javax.swing.JScrollPane kwScapeScrollB;
	private javax.swing.JPanel kwTab;
	private javax.swing.JPanel scapeTab;
	private javax.swing.JButton sfxAddKeywordButton;
	private javax.swing.JButton sfxDeleteButton;
	private javax.swing.JLabel sfxFXLabel;
	private javax.swing.JList<String> sfxFXList;
	private javax.swing.JPanel sfxFXPanel;
	private javax.swing.JScrollPane sfxFXScroll;
	private javax.swing.JLabel sfxKWLabel;
	private javax.swing.JLabel sfxKWLabelA;
	private javax.swing.JLabel sfxKWLabelB;
	private javax.swing.JList<String> sfxKWListA;
	private javax.swing.JList<String> sfxKWListB;
	private javax.swing.JPanel sfxKWPanel;
	private javax.swing.JScrollPane sfxKWScrollA;
	private javax.swing.JScrollPane sfxKWScrollB;
	private javax.swing.JButton sfxKWbuttonA;
	private javax.swing.JButton sfxKWbuttonB;
	private javax.swing.JTextField sfxNewKeywordField;
	private javax.swing.JButton sfxPreviewButton;
	private javax.swing.JButton sfxScapeButtonA;
	private javax.swing.JButton sfxScapeButtonB;
	private javax.swing.JLabel sfxScapeLabel;
	private javax.swing.JLabel sfxScapeLabelA;
	private javax.swing.JLabel sfxScapeLabelB;
	private javax.swing.JList<String> sfxScapeListA;
	private javax.swing.JList<String> sfxScapeListB;
	private javax.swing.JPanel sfxScapePanel;
	private javax.swing.JScrollPane sfxScapeScrollA;
	private javax.swing.JScrollPane sfxScapeScrollB;
	private javax.swing.JPanel sfxTab;
	private javax.swing.JButton ssAddKeywordButton;
	private javax.swing.JButton ssDelButton;
	private javax.swing.JLabel ssFXLabel;
	private javax.swing.JLabel ssFXLabelA;
	private javax.swing.JLabel ssFXLabelB;
	private javax.swing.JList<String> ssFXListA;
	private javax.swing.JList<String> ssFXListB;
	private javax.swing.JPanel ssFXPanel;
	private javax.swing.JScrollPane ssFXScrollA;
	private javax.swing.JScrollPane ssFXScrollB;
	private javax.swing.JButton ssFXbuttonA;
	private javax.swing.JButton ssFXbuttonB;
	private javax.swing.JLabel ssKWLabel;
	private javax.swing.JLabel ssKWLabelA;
	private javax.swing.JLabel ssKWLabelB;
	private javax.swing.JList<String> ssKWListA;
	private javax.swing.JList<String> ssKWListB;
	private javax.swing.JPanel ssKWPanel;
	private javax.swing.JScrollPane ssKWScrollA;
	private javax.swing.JScrollPane ssKWScrollB;
	private javax.swing.JButton ssKWbuttonA;
	private javax.swing.JButton ssKWbuttonB;
	private javax.swing.JTextField ssNewKeywordField;
	private javax.swing.JButton ssPreviewButton;
	private javax.swing.JLabel ssScapeLabel;
	private javax.swing.JList<String> ssScapeList;
	private javax.swing.JPanel ssScapePanel;
	private javax.swing.JScrollPane ssScapeScroll;
	private javax.swing.JTabbedPane tabPane;
	private GridBagConstraints gridBagConstraints_1;
	private GridBagConstraints gridBagConstraints_2;
	private GridBagConstraints gridBagConstraints_3;
	private GridBagConstraints gridBagConstraints_4;
	private GridBagConstraints gridBagConstraints_5;
	private GridBagConstraints gridBagConstraints_6;
	private GridBagConstraints gridBagConstraints_7;
	private GridBagConstraints gridBagConstraints_8;
	private GridBagConstraints gridBagConstraints_9;
	private GridBagConstraints gridBagConstraints_10;
	private GridBagConstraints gridBagConstraints_11;
	private GridBagConstraints gridBagConstraints_12;
	private GridBagConstraints gridBagConstraints_13;
	private GridBagConstraints gridBagConstraints_14;
	private GridBagConstraints gridBagConstraints_15;
	private GridBagConstraints gridBagConstraints_16;
	private GridBagConstraints gridBagConstraints_17;
	private GridBagConstraints gridBagConstraints_18;
	private GridBagConstraints gridBagConstraints_19;
	private GridBagConstraints gridBagConstraints_20;
	private GridBagConstraints gridBagConstraints_21;
	private GridBagConstraints gridBagConstraints_22;
	private GridBagConstraints gridBagConstraints_23;
	private GridBagConstraints gridBagConstraints_24;
	private GridBagConstraints gridBagConstraints_25;
	private GridBagConstraints gridBagConstraints_26;
	private GridBagConstraints gridBagConstraints_27;
	private GridBagConstraints gridBagConstraints_28;
	private GridBagConstraints gridBagConstraints_29;
	private GridBagConstraints gridBagConstraints_30;
	private GridBagConstraints gridBagConstraints_31;
	private GridBagConstraints gridBagConstraints_32;
	private GridBagConstraints gridBagConstraints_33;
	private GridBagConstraints gridBagConstraints_34;
	private GridBagConstraints gridBagConstraints_35;
	private GridBagConstraints gridBagConstraints_36;
	private GridBagConstraints gridBagConstraints_37;
	private GridBagConstraints gridBagConstraints_38;
	
}
